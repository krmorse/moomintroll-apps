<!DOCTYPE html>
<html>
<head>
    <title>TS Initiative Percentage View</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Mar 09 2017 18:21:29 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Mar 09 2017 18:21:29 GMT-0800 (PST)";
        var STORY    = "F166";
        var BUILDER  = "marjo60";
        var CHECKSUM = 88111731907;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) -->
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('CA.agile.technicalservices.util.WsapiUtils',{
    singleton: true,
    
    // given a store config, loads the records while returning a promise
    loadWsapiRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');
        var default_config = {
            autoLoad: true
        };
        var store_config = Ext.Object.merge(default_config, config);

        Ext.create('Rally.data.wsapi.Store',store_config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    },
    
    // given a store config, loads the records while returning a promise
    loadSnapshotRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');

        var default_config = {
            removeUnauthorizedSnapshots: true,
            sort: {}
        };
        
        var store_config = Ext.Object.merge(default_config, config);
        
        Ext.create('Rally.data.lookback.SnapshotStore',store_config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    },
    
    getPortfolioItemTypes: function(workspace) {
        var deferred = Ext.create('Deft.Deferred');
                
        var store_config = {
            fetch: ['Name','ElementName','TypePath'],
            model: 'TypeDefinition',
            filters: [
                {
                    property: 'TypePath',
                    operator: 'contains',
                    value: 'PortfolioItem/'
                }
            ],
            sorters: [ {property:'Ordinal', direction: 'ASC'}],
            autoLoad: true,
            listeners: {
                load: function(store, records, successful) {
                    if (successful){
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Failed to load types');
                    }
                }
            }
        };
        
        if ( !Ext.isEmpty(workspace) ) {
            store_config.context = { 
                project:null,
                workspace: workspace._ref ? workspace._ref : workspace.get('_ref')
            };
        }
                
        var store = Ext.create('Rally.data.wsapi.Store', store_config );
                    
        return deferred.promise;
    },
    
    loadWsapiRecordsParallel: function(store_config){
        var deferred = Ext.create('Deft.Deferred'),
            promises = [],
            thread_count = 9,
            me = this;

        var config = Ext.Object.merge({
            pageSize: 2000
        },store_config);
        
        config.autoLoad = false;
        config.limit    = config.pageSize;
        
        this.fetchWsapiCount(store_config).then({
            success: function(totalCount){
                var store = Ext.create('Rally.data.wsapi.Store', config),
                    totalPages = Math.ceil(totalCount/config.pageSize);

                var pages = _.range(1,totalPages+1,1);

                _.each(pages, function(page){
                    promises.push(function () {
                        return me.loadStorePage(page, store);
                    });
                });

                PortfolioItemCostTracking.promise.ParallelThrottle.throttle(promises, thread_count, me).then({
                    success: function(results){
                        deferred.resolve(_.flatten(results));
                    },
                    failure: function(msg){
                        deferred.reject(Ext.String.format("Parallel Load Problem:", msg));
                    }
                });
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred;
    },
    
    fetchWsapiCount: function(store_config){
        var deferred = Ext.create('Deft.Deferred');

        var config = Ext.Object.merge(store_config, {
            fetch: ['ObjectID'],
            limit: 1,
            pageSize: 1
        });
        
        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Count Problem: {1}", operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    
    loadStorePage: function(pageNum, store){
        var deferred = Ext.create('Deft.Deferred');
        
        store.loadPage(pageNum, {
            callback: function(records, operation){
                
                if (operation.wasSuccessful()){
                     deferred.resolve(records);
                } else {
                    console.error('Operation:', operation);
                    var msg = operation.error && operation.error.errors.join(',');
                    if ( Ext.isEmpty(msg) ) {
                        deferred.reject('Network issue while loading store page');
                    } else {
                        deferred.reject(msg + " (lsp)");
                    }
                }
            }
        });

        return deferred;
    },
    
    fetchAllowedValues: function(model_name, field_name) {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                model.getField(field_name).getAllowedValueStore().load({
                    callback: function(allowed_values, operation, success) {
                        deferred.resolve(Ext.Array.map(allowed_values, function(allowed_value){
                            return allowed_value.get('StringValue');
                        }));
                    }
                });
            }
        });
        return deferred.promise;
    }
    
});
Ext.define('TSKeys',{
    singleton: true,
    
    percentageKeyPrefix: 'ca.ts.percentage'
    
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

/*
 * 
 * For putting on the settings panel -- allows for a dropdown  representing a field and one representing its values
 * 
 */
Ext.define('CA.technicalservices.settings.FieldValuePairField', {
    extend:'Ext.form.field.Base',
    alias: 'widget.tsfieldvaluepairfield',

    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',
    store: undefined,
    
    /**
     * @cfg {String} blankText
     */
    blankText : 'Use + to add a field/value pair',

    labelAlign: 'top',
    
    /**
     * @cfg {String|Rally.data.wsapi.Model} model (req)
     * Model from which the fields will be available
     */
    model: null,

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },
    
    initComponent: function(){
        this.callParent();
        this.addEvents('ready');

        if ( Ext.isEmpty(this.model) ) {
            console.error('Must supply model for CA.technicalservices.settings.FieldValuePairField');
            return;
        }
        
    },
    
    onRender: function() {
        this.callParent(arguments);
        this._buildFieldValueGrid();        
    },
    
    _buildFieldValueGrid: function() {
        var container = Ext.create('Ext.container.Container',{
            layout: { type:'hbox' },
            renderTo: this.inputEl,
            minHeight: 50,
            minWidth: 50
        });
        
        container.doLayout();
                
        var decoded_value = [];
        if (this.initialConfig && this.initialConfig.value && !_.isEmpty(this.initialConfig.value)){
            if (!Ext.isObject(this.initialConfig.value)){
                decoded_value = Ext.JSON.decode(this.initialConfig.value);
            } else {
                decoded_value = this.initialConfig.value;
            }
            decoded_value = Ext.Array.map(decoded_value, function(val) {
                return { "FieldName": val.property, "FieldValue": val.value};
            });
        }
       
        var empty_text = "No selections";
        
        console.log('initial config', this._value, this.initialConfig, decoded_value);

        var custom_store = Ext.create('Ext.data.Store',{
            fields: ['FieldName','FieldValue'],
            data: decoded_value
        });
        
        var grid_width = Math.min(container.getWidth(true)-50,500);

        this._grid = container.add({
            xtype:'rallygrid',
            autoWidth: true,
            columnCfgs: this._getColumns(),
            showRowActionsColumn:false,
            showPagingToolbar: false,
            store: custom_store,
            height: 150,
            margin: 3,
            width: grid_width,
            emptyText: empty_text,
            editingConfig: {
                publishMessages: false
            }
        });
        
        
        container.add({
            xtype: 'rallybutton',
            text: '+',
            margin: '3 0 0 10',
            listeners: {
                scope: this,
                click: function(){
                    Ext.create('CA.technicalservices.FieldValuePickerDialog',{
                        autoShow: true,
                        width: 250,
                        heigh: 250,
                        model: this.model,
                        listeners: {
                            scope: this,
                            itemschosen: function(new_data){
                                this._grid.getStore().add(new_data);
                            }
                        }
                    });                
                }
            }
        });
        this.fireEvent('ready', true);

    },
    
    _removeValue: function() {
        this.grid.getStore().remove(this.record);
    },
    
    _getColumns: function() {
        var me = this;
        return [
        {
            xtype: 'rallyrowactioncolumn',
            scope: this,
            rowActionsFn: function(record){
                return  [
                    {text: 'Remove', record: record, handler: me._removeValue, grid: me._grid }
                ];
            }
        },
        {
            text: 'Field Name',
            dataIndex: 'FieldName',
            flex: 1,
            editor: false
        },
        {
            text: 'Field Value',
            dataIndex: 'FieldValue',
            flex: 1,
            editor: false
        }
        ];
    },
    
    _getSettingValue: function() {
        var store = this._grid.getStore();

        var selections = [];
        store.each(function(record) {
            var filter = {property:record.get('FieldName'),value: record.get('FieldValue')};
            selections.push(filter);
        }, this);
        
        return selections;
    },
    
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._getSettingValue());
        return data;
    },
    
    setValue: function(value) {
        console.log('setValue', value);
        this.callParent(arguments);
        this._value = value;
    }
});
Ext.define('CA.technicalservices.FieldValuePickerDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsfieldvaluepickerdialog',

    minWidth: 250,
    minHeight: 250,
    
    layout: 'vbox',
    closable: true,
    draggable: true,

    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose Field & Value',

        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',
        
        /**
         * @cfg {String} model (Required)
         * 
         */
        model: null
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    selectionCache: [],

    initComponent: function() {
        this.callParent(arguments);

        this.addCls(['chooserDialog', 'chooser-dialog']);
    },

    beforeRender: function() {
        this.callParent(arguments);

        this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    itemId: 'doneButton',
                    text: this.selectionButtonText,
                    cls: 'primary rly-small',
                    scope: this,
                    disabled: true,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('itemschosen', this.getSelectedRecords());
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

        this._addFieldSelector();
    },

    _addFieldSelector: function() {
        this.fieldSelector = this.add({
            xtype:'rallyfieldcombobox',
            model:this.model,
            fieldLabel: 'Field:',
            labelAlign: 'top',
            width: 175,
            margin: 10,
            _isNotHidden: function(field) {
                //if ( field.hidden ) { return false; }

                var attribute_definition = field.attributeDefinition;
                if ( Ext.isEmpty(attribute_definition) ) { return false; }
                
                if ( attribute_definition.AttributeType == "BOOLEAN" ) { return true; }
                if ( attribute_definition.AttributeType == "RATING" )  { return true; }
                if ( attribute_definition.AttributeType == "STRING" && attribute_definition.Constrained == true ) { return true; }
                
                console.log(field.name, attribute_definition);
                return false;
            },
            
            listeners: {
                change: this._addValueSelector,
                scope: this
            }
        });
    },

    _addValueSelector: function() {
        if ( this.valueSelector ) { this.valueSelector.destroy(); }
        this.down('#doneButton').setDisabled(true);
        
        this.valueSelector = this.add({
            xtype:'rallyfieldvaluecombobox',
            model: this.model,
            field: this.fieldSelector.getValue(),
            fieldLabel: 'Value:',
            labelAlign: 'top',
            width: 175,
            margin: 10,
            listeners: {
                change: function() { this.down('#doneButton').setDisabled(false); },
                scope: this
            }
        });
    },
    
    getSelectedRecords: function() {
        return {
            FieldName: this.fieldSelector.getValue(),
            FieldValue: this.valueSelector.getValue()
        }
    }

});

Ext.define('TSDateCalculator',{
    singleton: true,
    
    // all of the first day counts as 1 day.  So December 1 at 5am is 1 day, so is 6pm.
    getDaysAfterMonthEnd: function(check_date) {
        var month = check_date.getMonth();
        var year = check_date.getFullYear();
        var month_end = new Date(year,month,1);
        
        return Rally.util.DateTime.getDifference(check_date,month_end,'day') + 1;
    },
    
    // all of the last day counts as 1 day.  So December 31 at 5am is 1 day, so is 6pm.
    getDaysBeforeMonthEnd: function(check_date) {
        var month = check_date.getMonth();
        var year = check_date.getFullYear();
        var month_end = Rally.util.DateTime.add(new Date(year,month,1),'month',1);
        
        return Rally.util.DateTime.getDifference(month_end,check_date,'day') + 1;
    },
    
    // given a date, and boundary limits for either side of a month end date, what's the
    // month this date is in (if any)?
    getMonthNameInLimits: function(check_date, before_limit, after_limit) {
        var before_days = this.getDaysBeforeMonthEnd(check_date);
        var after_days = this.getDaysAfterMonthEnd(check_date);
        
        if ( before_limit + after_limit >= 30 ) {
            return null;
        }
        
        if ( before_days <= before_limit ) {
            return Ext.Date.format(check_date,'F');
        }
        
        if ( after_days <= after_limit ) {
            var last_month = Rally.util.DateTime.add(check_date,'month',-1);
            return Ext.Date.format(last_month,'F');
        }
        
        return null;
    },
    
    getMonthIsoInLimits: function(check_date, before_limit, after_limit) {
        var before_days = this.getDaysBeforeMonthEnd(check_date);
        var after_days = this.getDaysAfterMonthEnd(check_date);
        
        if ( before_limit + after_limit >= 30 ) {
            return null;
        }
        
        if ( before_days <= before_limit ) {
            return Ext.Date.format(check_date,'Y-m-01');
        }
        
        if ( after_days <= after_limit ) {
            var last_month = Rally.util.DateTime.add(check_date,'month',-1);
            return Ext.Date.format(last_month,'Y-m-01');
        }
        
        return null;
    }

});
Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
                
        var model = grid.model;

        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            var data = row;
            if ( Ext.isFunction(row.getData) ) { data = row.getData(); }
            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row }), grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            //if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
//            
//            if ( column.hidden ) {
//                return;
//            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
Ext.define('TSModel',{
    extend: 'Ext.data.Model',

    fields: [
        { name: '_ref', type: 'string' },
        { name: '_refObjectName', type: 'string' },
        { name: 'Name', type: 'string' },
        { name: 'ObjectID', type: 'int' },
        { name: 'Description', type: 'string' },
        { name: 'FormattedID', type: 'string' },
        { name: '__percentage', type: 'float', defaultValue: 0 },
        { name: 'Team', type:'object' },
        { name: '__prefValues', type:'object' }, // should be a hash with keys = month starts
        { name: '__pref', type: 'object', convert: function(pref,record) {
            if ( Ext.isEmpty(pref) ) { return; }
            var value = Ext.JSON.decode(pref.get('Value'));
            record.set('__lastChangedBy',value.__lastChangedBy);
            record.set('__lastChangedOn', value.__lastChangedOn);
            record.set('__percentage', value.__percentage);
            return pref;
        }},
        { name: '__lastChangedBy', type: 'object' },
        { name: '__lastChangedOn', type: 'string' },
        { name: '__monthStart', type: 'string' },
        { name: '__dataProjectRef', type:'string' } // for the pref to be assigned to
    ],
    
    getKey: function() {
            var key = Ext.String.format("{0}.{1}.{2}",
                TSKeys.percentageKeyPrefix,
                this.get('__monthStart'),
                this.get('ObjectID')
            );
            return key;
    },

    save: function(v) {
        var changes = this.getChanges();

        if (! Ext.isObject(changes) ) {
            return;
        }
        
        var user = Rally.getApp().getContext().getUser();

        this.set('__lastChangedBy', {
            ObjectID: user.ObjectID,
            _ref: user._ref,
            _refObjectName: user._refObjectName,
            UserName: user.UserName
        });
        var timestamp = Rally.util.DateTime.toIsoString(new Date());
        this.set('__lastChangedOn', timestamp);
        
        return this._savePercentage();
    },
    
    _savePercentage: function() {
        var me = this;
        
        var json_value = Ext.JSON.encode({
            __lastChangedOn: this.get('__lastChangedOn'),
            __lastChangedBy: this.get('__lastChangedBy'),
            __percentage: this.get('__percentage')
        });
        
        var pref = this.get('__pref');
        if ( Ext.isEmpty(pref) ) {
            console.log("Creating value for new pref:", json_value);
            return this._createPreference(json_value);
        } else {
            console.log("Saving value for existing pref:", json_value);
            pref.set('Value',json_value);
            return pref.save();
        }
    },
    
    _createPreference: function(json_value) {
        var me = this,
            key = this.getKey(),
            project_ref = this.get('__dataProjectRef');
        
        var config = {
            Project: project_ref,
            Name: key,
            Value: json_value
        };
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            scope: this,
            success: function(model) {
                var pref = Ext.create(model,config);
                pref.save({
                    callback: function(result, operation) {
                        me.set('__pref', result[0]);
                    }
                });
            }
        });
    }
});
Ext.define("TSInitiativePercentageView", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    
    layout: 'border',
    
    items: [
        {xtype:'container',itemId:'selector_box',region: 'north', layout: 'hbox', defaults: { margin: 10 }},
        {xtype:'container',itemId:'display_box', region: 'center', layout: 'fit'}
    ],

    integrationHeaders : {
        name : "TSInitiativePercentageReport"
    },
    
    config: {
        defaultSettings: {
            initiativeFieldValues: []
        }
    },
    
    launch: function() {
        var me = this;
//        console.log('subadmin:', this.getContext().getPermissions().isSubscriptionAdmin());
//        console.log('wsadmin:',  this.getContext().getPermissions().isWorkspaceAdmin());
//        console.log('eitheradmin:',  this.getContext().getPermissions().isWorkspaceOrSubscriptionAdmin());
//        if ( !this.getContext().getPermissions().isWorkspaceOrSubscriptionAdmin() ) {
//            this._showAppMessage("You must be a workspace or subscription admin to use this app.");
//            return;
//        }
        
        CA.agile.technicalservices.util.WsapiUtils.getPortfolioItemTypes().then({
            success: function(pis) {
                this.PortfolioItemTypes = pis;
                this._addSelectors();
            },
            scope: this
        });
    },
    
    _getMonthData: function() {
        var month_data = [];
        var current_date = new Date();
        
        for ( var i=0; i<14; i++ ) {
            var month_iso = Ext.Date.format(current_date, 'Y-m');
            month_data.push({name:month_iso,value:month_iso + '-01'});
            current_date = Rally.util.DateTime.add(current_date,'month',-1);
        }
        
        return month_data;
    },
    
    _addSelectors: function() {
        var me = this,
            container = this.getSelectorBox();
    
        container.add({
            xtype:'combo',
            store: Ext.create('Ext.data.Store',{
                fields: ['name','value'],
                data: this._getMonthData()
            }),
            fieldLabel: 'From',
            labelWidth: 45,
            displayField: 'name',
            valueField: 'value',
            typeAhead: false,
            queryMode: 'local'
        }).on(
            'change', 
            function(cb) {
                this.selectedStart = cb.getValue();
                this._updateData();
            }, 
            me
        );
        
        container.add({
            xtype:'combo',
            store: Ext.create('Ext.data.Store',{
                fields: ['name','value'],
                data: this._getMonthData()
            }),
            fieldLabel: 'Through',
            labelWidth: 45,
            displayField: 'name',
            valueField: 'value',
            typeAhead: false,
            queryMode: 'local'
        }).on(
            'change', 
            function(cb) {
                this.selectedEnd = cb.getValue();
                this._updateData();
            }, 
            me
        );
        
        container.add({xtype:'container',flex: 1});
        
        container.add({
            xtype:'rallybutton',
            itemId:'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            disabled: true,
            listeners: {
                scope: this,
                click: this._export
            }
        });
        
    },
    
    _updateData: function() {
        var me = this;
        
        this._clearDisplayBox();
        this.logger.log('starting:', this.selectedStart, this.selectedEnd);
        
        if ( Ext.isEmpty(this.selectedStart) || Ext.isEmpty(this.selectedEnd) ) {
            return;
        }
        
        if ( this.selectedStart > this.selectedEnd ) { 
            var holder = this.selectedStart;
            this.selectedStart = this.selectedEnd;
            this.selectedEnd = holder;
        }
        
        this.logger.log('using start/end', this.selectedStart, this.selectedEnd);

        this.projectsForArtifactOid = {};
        
        Deft.Chain.pipeline([
            this._fetchCandidateInitiatives,
            this._fetchActiveStoryHierarchies,
            this._fetchInitiativesFromHierarchies,
            this._fetchAlreadyEnteredData
        ],this).then({
            success: function(results) {
                var initiatives = results[0],
                    prefs_by_oid = results[1];
                
                this.logger.log("prefs by oid:", prefs_by_oid);
                this.logger.log("projects by oid:", this.projectsForArtifactOid);
                
                var initiative_data = Ext.Array.map(initiatives, function(initiative) {
                    return initiative.getData();
                });
                
                // need to have a row for each initiative for each project it is in
                var final_models = [];
                
                // need to make a column for each of the preference months
                var months = this._getArrayOfMonthsFromSelected();
                
                Ext.Array.each(initiative_data, function(initiative){
                    var oid = initiative.ObjectID;
                    
                    initiative.__prefValues = {};
                    Ext.Array.each(months, function(month) {
                        initiative.__prefValues[month] = null;
                    });
                    
                    Ext.Object.each(this.projectsForArtifactOid[oid], function(project_oid, project){
                        var clone = Ext.clone(initiative);
                        clone.Team = project;
                        
                        Ext.Array.each(prefs_by_oid[oid], function(pref){
                            if ( pref.get('Project')._refObjectName == project.Name ) {
                                var pref_month = this._getPrefMonthFromKey(pref.get('Name'));
                                clone.__prefValues[pref_month] = pref.get("Value");
                                clone.__pref = pref;
                            }
                        },this);
                        final_models.push(clone);
                    },this);
                    
                },this);
                
                this.displayGrid(final_models);
            },
            failure: function(msg) {
                
                if ( Ext.isString(msg) ) {
                    this.showErrorNotification( msg );
                    return;
                }
                if ( Ext.isObject(msg) && !Ext.isEmpty(msg.msg) ) {
                    this._showAppMessage(msg.msg);
                }
            },
            scope: this
        }).always(function() { me.setLoading(false); });
    },
    
    /*
     * Only initiatives that matched a particular value during the month
     * 
     * Because of the large number of stories and changes to stories potentially available, 
     * need to limit the query early.
     */
    _fetchCandidateInitiatives: function() {
        this.setLoading("Finding candidate initiatives...");

        var initiative_filters = this.getSetting('initiativeFieldValues'),
            deferred = Ext.create('Deft.Deferred');
        
        if ( Ext.isString(initiative_filters) ) {
            initiative_filters = Ext.JSON.decode(initiative_filters);
        }
        var month_start = this.selectedStart;
        var next_month = Rally.util.DateTime.toIsoString(
            Rally.util.DateTime.add(
                Rally.util.DateTime.fromIsoString(this.selectedEnd), 'month', 1
            )
        );

        var filters = Ext.create('Rally.data.lookback.QueryFilter',{property:'_TypeHierarchy', operator:'in', value:[this.PortfolioItemTypes[1].get('TypePath')]});
        
        if ( !Ext.isEmpty(initiative_filters) ) {
            filters = filters.and(
                Ext.create('Rally.data.lookback.QueryFilter',{property:'_ValidTo', operator:'>=', value:month_start})
            );
        
            filters = filters.and(
                Ext.create('Rally.data.lookback.QueryFilter',{property:'_ValidFrom', operator:'<', value:next_month})
            );
            
            var filterized_initiative_filters = Rally.data.lookback.QueryFilter.and(initiative_filters);
            filters = filters.and(filterized_initiative_filters);
        } else {
            filters = filters.and(Ext.create('Rally.data.lookback.QueryFilter',{property:'__At', value: 'current'}));
        }
        
        var config = {
            filters: filters,
            fetch: ['ObjectID','FormattedID','Name'],
            limit: Infinity,
            compress: true
        };
        
        CA.agile.technicalservices.util.WsapiUtils.loadSnapshotRecords(config).then({
            scope: this,
            success: function(snapshots) {
                this.logger.log('candidate initiative snapshots:', snapshots.length);
                
                if ( snapshots.length === 0 ) {
                    deferred.reject({msg: 'No initiatives meet the filters.'});
                    return;
                }
                
                var snaps_by_oid = {};
                Ext.Array.each(snapshots, function(snapshot){
                    snaps_by_oid[snapshot.get('ObjectID')] = snapshot;
                });
                
                this.initiative_snaps_by_oid = snaps_by_oid;
                
                deferred.resolve( Ext.Object.getValues(snaps_by_oid) );
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _fetchActiveStoryHierarchies: function(initiative_snapshots) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        this.setLoading("Finding appropriate stories...");
        
        Deft.Chain.parallel([
            function() { return me._fetchStoryChangeSnapshots(initiative_snapshots); },
            function() { return me._fetchStoryStartSnapshots(initiative_snapshots); }
        ],this).then({
            scope: this,
            success: function(results) {
                var snapshots = Ext.Array.push(results[0],results[1]);
                this.logger.log("Got story snapshots:", snapshots.length);
                if ( snapshots.length === 0 ) {
                    deferred.reject({msg: 'There were no active stories in the time period.'});
                    return;
                }
                var hierarchies = {};
                
                Ext.Array.map(snapshots, function(snapshot){
                    hierarchies[snapshot.get('ObjectID')] = snapshot.get('_ItemHierarchy');
                    var project = snapshot.get('Project');
                    
                    Ext.Array.each(snapshot.get('_ItemHierarchy'), function(oid) {
                        if ( Ext.isEmpty(me.projectsForArtifactOid[oid])) {
                            me.projectsForArtifactOid[oid] = { };
                        }
                        me.projectsForArtifactOid[oid][project.ObjectID] = project;
                    });
                });
                
                deferred.resolve( Ext.Object.getValues(hierarchies) );
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _fetchStoryChangeSnapshots: function(initiative_snapshots) {
        var month_start = this.selectedStart;
        
        var next_month = Rally.util.DateTime.toIsoString(
            Rally.util.DateTime.add(
                Rally.util.DateTime.fromIsoString(this.selectedEnd), 'month', 1
            )
        );
        
        //
        var active_states = ['Defined','In-Progress','Completed'];
        var valid_types = [null,'Standard'];
        var initiative_oids = Ext.Array.map(initiative_snapshots || [], function(snap){ return snap.get('ObjectID'); });
        
        this.logger.log('initiative count', initiative_oids.length);
        
        var config = {
            find: {
                "_ItemHierarchy": { "$in": initiative_oids },
                _TypeHierarchy: { "$in": ['HierarchicalRequirement'] },
                "Children": null,
                "c_StoryType": { "$in": valid_types },
                "ScheduleState": { "$in":  active_states },
                "_PreviousValues.ScheduleState": { "$exists": true },
                "_ValidFrom": {
                    "$lt":  next_month
                },
                "_ValidTo": { 
                    "$gt": month_start
                }
            },
            fetch: ['ObjectID','_ItemHierarchy','Project','_ValidTo','_ValidFrom'],
            hydrate: ['Project'],
            useHttpPost: true,
            limit: Infinity
        };
        
        return CA.agile.technicalservices.util.WsapiUtils.loadSnapshotRecords(config);
    },
        
    _fetchStoryStartSnapshots: function(initiative_snapshots) {
        var month_start = this.selectedStart;
        
        var next_month = Rally.util.DateTime.toIsoString(
            Rally.util.DateTime.add(
                Rally.util.DateTime.fromIsoString(this.selectedEnd), 'month', 1
            )
        );
        
        //
        var active_states = ['Defined','In-Progress','Completed'];
        var valid_types = [null,'Standard'];
        var initiative_oids = Ext.Array.map(initiative_snapshots || [], function(snap){ return snap.get('ObjectID'); });
        
        this.logger.log('initiative count', initiative_oids.length);
        
        var config = {
            find: {
                "_ItemHierarchy": { "$in": initiative_oids },
                _TypeHierarchy: { "$in": ['HierarchicalRequirement'] },
                "Children": null,
                "c_StoryType": { "$in": valid_types },
                "ScheduleState": { "$in":  active_states },
                "__At": month_start
            },
            fetch: ['ObjectID','_ItemHierarchy','Project','_ValidTo','_ValidFrom'],
            hydrate: ['Project'],
            useHttpPost: true,
            limit: Infinity
        };
        
        return CA.agile.technicalservices.util.WsapiUtils.loadSnapshotRecords(config);
    },
    
    _fetchInitiativesFromHierarchies: function(hierarchies) {
        this.logger.log('_fetchInitiativesFromHierarchies',hierarchies.length);

        if ( hierarchies.length === 0 ) { return []; }
        return Ext.Object.getValues(this.initiative_snaps_by_oid);
        
//        this.setLoading("Finding associated initiatives...");
//
//        var oids = [];
//        Ext.Array.each(hierarchies, function(hierarchy){
//            hierarchy.pop();
//            oids = Ext.Array.push(oids,hierarchy);
//        });
//        
//        oids = Ext.Array.unique(oids);
//        this.logger.log("Searching for this many PI oids:", oids.length);
//        
//        var filter_array =  [];
//        Ext.Array.each(oids, function(oid){
//            filter_array.push({ property:'ObjectID',value:oid });
//        });
//        
//        this.logger.log('Got array');
//        var filters = Rally.data.wsapi.Filter.or( filter_array );
//        
//        this.logger.log('Got filter');
//        
//        if ( Ext.isEmpty(filters) ) { return []; }
//        
//        var base_filter = this.getBaseInitiativeFilter();
//        if ( !Ext.isEmpty(base_filter) ) {
//            filters = filters.and(base_filter);
//        }
//        
//        this.logger.log('-- here');
//        this.logger.log('--', this.PortfolioItemTypes[1].get('TypePath'));
//
//        var config = {
//            model: this.PortfolioItemTypes[1].get('TypePath'),
//            filters: filters,
//            fetch: ['FormattedID','Name'],
//            enablePostGet: true,
//            context: { project: null }
//        };
//         
//        this.logger.log('config:', config);
//        return CA.agile.technicalservices.util.WsapiUtils.loadWsapiRecords(config);
    },
    

    
    _fetchAlreadyEnteredDataForMonth: function(month_start,key_prefix) {
        this.logger.log('_fetchAlreadyEnteredDataForMonth', month_start, key_prefix);
        var config = {
            model: 'Preference',
            fetch: ['Name','Value','Project'],
            filters: [
                {property:'Name',operator:'contains',value: key_prefix + "." + month_start}
            ],
            pageSize: 2000,
            context: { project: null }
        };
        
        return CA.agile.technicalservices.util.WsapiUtils.loadWsapiRecords(config);
    },
    
    _getArrayOfMonthsFromSelected: function() {
        var start = this.selectedStart;
        var end = this.selectedEnd;
        this.logger.log("_getArrayOfMonthsFromSelected", start, end);
        var months = [start];
        var next_month = Rally.util.DateTime.fromIsoString(start);
        var next_month_iso = start;
        
        while ( start != end && end > next_month_iso ) {
            next_month = Rally.util.DateTime.add(next_month, 'month', 1),
            
            next_month_iso = Ext.Date.format(next_month,'Y-m-01');
            months.push(next_month_iso);
        }
        
        months = Ext.Array.unique(months);

        this.logger.log('for months:', months);
        return months;
    },
    
    _fetchAlreadyEnteredData: function(initiatives) {
        var deferred = Ext.create('Deft.Deferred'),
            key_prefix = TSKeys.percentageKeyPrefix,
            me = this;
        
        this.setLoading("Finding entered percentages...");

        var promises = [];
        this.logger.log('_fetchAlreadyEnteredData', initiatives.length);
        
        Ext.Array.each(this._getArrayOfMonthsFromSelected(), function(month){
            promises.push( function() { return me._fetchAlreadyEnteredDataForMonth(month,key_prefix); } );
        });
        
        Deft.Chain.sequence(promises).then({
            scope: this,
            success: function(prefs) {
                prefs = Ext.Array.flatten(prefs);
                
                this.logger.log('found prefs:', prefs.length);
                
                var prefs_by_oid = {};
                Ext.Array.each(prefs, function(pref){
                    var pref_oid = this._getPrefObjectFromKey(pref.get('Name'));
                    
                    if ( Ext.isEmpty(pref_oid) ) { return; }
                    if (Ext.isEmpty(prefs_by_oid[pref_oid])) {
                        prefs_by_oid[pref_oid] = [];
                    }
                    
                    prefs_by_oid[pref_oid].push(pref);
                },this);
                deferred.resolve([initiatives,prefs_by_oid]);
            },
            failure: function(msg) {
                deferred.reject(msg)
            }
        });
        
        return deferred.promise;
    },
    
    _getPrefObjectFromKey: function(key) {
        var pref_array = key.split('.');
        if ( pref_array.length != 5 ) { return null; }
        return pref_array[4];
    },
    
    _getPrefMonthFromKey: function(key) {
        var pref_array = key.split('.');
        if ( pref_array.length != 5 ) { return null; }
        return pref_array[3];
    },
    
    displayGrid: function(initiatives) {
        this.logger.log('displayGrid', initiatives);
        
        var store = Ext.create('Rally.data.custom.Store',{
            model:'TSModel',
            data: initiatives,
            groupField: 'ObjectID'
        });
        
        this._clearDisplayBox();
        
        var display_box = this.getDisplayBox();
        
        this.grid = display_box.add({
            xtype:'rallygrid',
            columnCfgs: this._getColumns(),
            store: store,
            showRowActionsColumn : false,
            disableSelection: true,
            enableColumnMove: false,
            enableColumnResize : false,
            features: [{
                ftype: 'grouping',
                startCollapsed: true,
                groupHeaderTpl: '{[values.rows[0].data.FormattedID]}: {[values.rows[0].data.Name]}'
            }]
        });
        this.down('#export_button').setDisabled(false);
    },
    
    _getColumns: function() {
        var columns = [
//            { 
//                text: 'ID',       
//                xtype: 'templatecolumn', 
//                tpl: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate',{
//                    showIcon: false,
//                    showHover: true
//                })
//            },
//            { dataIndex:'Name',text:'Name', flex: 1},
            { 
                dataIndex: 'FormattedID',
                text: 'ID',
                hidden: true
            },
            {
                dataIndex: 'Name',
                text: 'Name',
                hidden: true
            },
            { 
                text: 'Team',
                dataIndex: 'Team',
                flex: 1,
                renderer: function(value,meta,record){
                    if ( Ext.isObject(value) ) {
                        return value._refObjectName || value.Name;
                    }
                    return value;
                }
            },
            { 
                text: 'Team ObjectID',
                dataIndex: 'Team',
                renderer: function(value,meta,record){
                    if ( Ext.isObject(value) ) {
                        return value.ObjectID;
                    }
                    return value;
                }
            }];
        
        var months = this._getArrayOfMonthsFromSelected();
        Ext.Array.each(months, function(month){
            columns.push({ 
                dataIndex:'__prefValues', 
                text: 'Percentage (' + month + ')', 
                width: 100,
                align: 'center',
                renderer: function(v) {
                	console.log('--',month, v[month],v);
                    if ( Ext.isEmpty(v) ) { return ""; }
                    var value = v[month];
                    
                    if ( Ext.isString(value) ) {
                        value = Ext.JSON.decode(value);
                    }
                    if ( Ext.isEmpty(value) || Ext.isEmpty(value.__percentage) ) { return ""; }
                    
                    return value.__percentage + "%";
                }
            });
            columns.push({ 
                dataIndex:'__prefValues', 
                text: 'Entered By (' + month + ')', 
                width: 100,
                align: 'center',
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) { return ""; }
                    var value = v[month];
                    
                    if ( Ext.isString(value) ) {
                        value = Ext.JSON.decode(value);
                    }
                    if ( Ext.isEmpty(value) ) { return ""; }
                    
                    return value.__lastChangedBy._refObjectName;
                }
            });
            columns.push({ 
                dataIndex:'__prefValues', 
                text: 'Change Date (' + month + ')', 
                width: 100,
                align: 'center',
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) { return ""; }
                    var value = v[month];
                    
                    if ( Ext.isString(value) ) {
                        value = Ext.JSON.decode(value);
                    }
                    if ( Ext.isEmpty(value) ) { return ""; }
                    
                    return value.__lastChangedOn;
                }
            });            
        });
           
        return columns;
    },
    
    getSelectorBox: function() {
        return this.down('#selector_box');
    },
    
    getDisplayBox: function() {
        return this.down('#display_box');
    },
    
    getLowestLevelPITypePath: function() {
        return this.PortfolioItemTypes[0].get('TypePath');
    },
    
    _showAppMessage: function(msg){
        var display_box = this.getDisplayBox();
        display_box.removeAll();
        
        var ct = display_box.add({
            xtype: 'container',
            tpl: '<div class="no-data-container"><div class="secondary-message">{message}</div></div>'
        });
        ct.update({message: msg});
    },
    
    _clearDisplayBox: function() {
        var display_box = this.getDisplayBox();
        display_box.removeAll();
    },
    
    getBaseInitiativeFilter: function() {
        if (this.getSetting('query')){
            return Rally.data.wsapi.Filter.fromQueryString(this.getSetting('query'));
        }
        return null;
    },
    
    getSettingsFields: function() {
        var type_path = "PortfolioItem/Initiative";
        if ( this.PortfolioItemTypes && this.PortfolioItemTypes.length > 1) {
            type_path = this.PortfolioItemTypes[1].get('TypePath');
        }
        
        return [
            {
                xtype:'tsfieldvaluepairfield',
                name: 'initiativeFieldValues',
                model: type_path,
                fieldLabel: 'Limit to Initiatives that Had this Field/Value Pairing during the Month:'
            }
//            {
//                xtype: 'textarea',
//                fieldLabel: 'Query',
//                labelAlign: 'right',
//                name: 'query',
//                anchor: '100%',
//                cls: 'query-field',
//                margin: '25 70 0 0',
//                plugins: [
//                    {
//                        ptype: 'rallyhelpfield',
//                        helpId: 194
//                    },
//                    'rallyfieldvalidationui'
//                ],
//                validateOnBlur: false,
//                validateOnChange: false,
//                validator: function(value) {
//                    try {
//                        if (value) {
//                            Rally.data.wsapi.Filter.fromQueryString(value);
//                        }
//                        return true;
//                    } catch (e) {
//                        return e.message;
//                    }
//                }
//            }
        ];
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    _export: function(){
        var me = this;
        this.logger.log('_export');
        
        var grid = this.down('rallygrid');
        var rows = this.rows;
      
        if ( !grid && !rows ) { return; }
        
        var promises = [function() { return Rally.technicalservices.FileUtilities.getCSVFromRows(this,grid,rows); } ];

        if ( !rows || rows.length === 0 ) {
            promises = [function() { return Rally.technicalservices.FileUtilities._getCSVFromCustomBackedGrid(grid); } ];
        }
        var filename = 'report.csv';
        
        this.setLoading("Generating CSV");
        Deft.Chain.sequence(promises).then({
            scope: this,
            success: function(csv){
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    }
    
});

            
               Rally.launchApp('TSInitiativePercentageView', {
                   name: 'TS Initiative Percentage View'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.x-border-layout-ct {
    background-color: #fff;
}
    </style>

</head>
<body></body>
</html>